/* tslint:disable */
/* eslint-disable */
/**
 * bidding_app
 * A simple bidding app
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tom@moulard.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PurchaseRequest,
} from '../models/index';
import {
    PurchaseRequestFromJSON,
    PurchaseRequestToJSON,
} from '../models/index';

export interface PurchasePointsRequest {
    purchaseRequest: PurchaseRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async purchasePointsRaw(requestParameters: PurchasePointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['purchaseRequest'] == null) {
            throw new runtime.RequiredError(
                'purchaseRequest',
                'Required parameter "purchaseRequest" was null or undefined when calling purchasePoints().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/purchase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseRequestToJSON(requestParameters['purchaseRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async purchasePoints(requestParameters: PurchasePointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.purchasePointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
